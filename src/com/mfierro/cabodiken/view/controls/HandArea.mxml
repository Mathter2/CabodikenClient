<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow
			xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:controls="com.mfierro.cabodiken.view.controls.*"
			title="{area.owner.name}'s Hand"
			showCloseButton="false"
			width="300" 
			height="500"
			verticalAlign="bottom" >
			
	<mx:Script>
		<![CDATA[
			import com.mfierro.cabodiken.model.Area;
			import com.mfierro.cabodiken.model.Card;
			import com.mfierro.cabodiken.model.Deck;
			import com.mfierro.cabodiken.model.GameObject;
			import com.mfierro.cabodiken.model.CabodikenModel;
			import flash.utils.Dictionary;
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.controls.Image;
			import mx.core.DragSource;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.utils.ObjectUtil;
			import mx.effects.Move;
			import mx.managers.DragManager;
			
			[Bindable]
			private var model:CabodikenModel = CabodikenModel.getInstance();
			[Bindable]
			private var _lastActionCounter:int;
			[Bindable]
			public var area:Area;
			public var isOwner:Boolean = false;
			
			private var placedObjects:Dictionary = new Dictionary();
			private var placedControls:Dictionary = new Dictionary();
			
			public function set lastActionCounter( value:int ) : void {
				
				var placedControl:UIComponent;
				var gameObjectCopy:Card;
					
				for each( var gameObject:Card in model.gameObjectCollection.getObjectsByArea( area.areaId ) ) {
					
					gameObjectCopy = gameObject.clone() as Card;
					
					if ( !isOwner ) {
							
							gameObjectCopy.isFaceDown = ! gameObject.isFaceDown;
							
						}
					
					if ( placedObjects[gameObject.id] == null ) {
						
						placedObjects[gameObject.id] = gameObjectCopy;
						placedControl = gameObjectCopy.draw();
						placedControls[gameObject.id] = placedControl;
						canvas.addChild(placedControl);
						
					} else {
						
						var placedObject:Card = placedObjects[gameObject.id];
						
						if ( ObjectUtil.compare(placedObject.location, gameObject.location) != 0 ) {
								
							var moveEffect:Move = new Move();
							placedControl = placedControls[gameObject.id];
							//placedObject = gameObject.clone();
							placedObjects[gameObject.id] = placedObject;
							moveEffect.target = placedControl;
							moveEffect.xTo = gameObject.location.x;
							moveEffect.yTo = gameObject.location.y;
							moveEffect.play();
							placedControl.x = gameObject.location.x;
							placedControl.y = gameObject.location.y;
							placedObject.location = gameObject.location;
							placedControl.parent.setChildIndex(placedControl, placedControl.parent.numChildren - 1);
							
						}
						
						if (ObjectUtil.compare(placedObject, gameObjectCopy) != 0 ) {
					
							canvas.removeElement(placedControls[gameObject.id]);
							placedControl = gameObjectCopy.draw();
							placedControls[gameObject.id] = placedControl;
							canvas.addElement(placedControl);
							placedObjects[gameObject.id] = gameObjectCopy;
							
						}

					}
					
				}
				
				for each (var removedGameObject:GameObject in model.gameObjectCollection.getRemovedObjects( area.areaId ) ) {
					
					canvas.removeChild(placedControls[removedGameObject.id]);
					
					delete placedObjects[removedGameObject.id];
					delete placedControls[removedGameObject.id];
					
					model.gameObjectCollection.commitRemove( area.areaId, removedGameObject );
					
				}
				
				_lastActionCounter = value;
				
			}
			
			public function get lastActionCounter () : int {
				
				return _lastActionCounter;
				
			}
			
			private function dragEnter( event:DragEvent ) : void {
				
				var dragSource:DragSource = event.dragSource;
				// Accept the drag only if the user is dragging data 
				// identified by the 'color' format value.
				if (dragSource.hasFormat("type") && dragSource.hasFormat("object") && 
					dragSource.hasFormat("x") && dragSource.hasFormat("y") && 
					(dragSource.dataForFormat("type") == "CARD" || dragSource.dataForFormat("type") == "DECK_CARD") ) {

					// Get the drop target component from the event object.
					var target:UIComponent = event.currentTarget as UIComponent;
					// Accept the drop.
					DragManager.acceptDragDrop(target);
				}
				
			}
			
			private function dragDrop( event:DragEvent ) : void {
				
				var gameObject:GameObject = event.dragSource.dataForFormat("object") as GameObject;
				var type:String = event.dragSource.dataForFormat("type") as String;
				var source:UIComponent = event.dragInitiator as UIComponent;
				var target:UIComponent =  event.currentTarget as UIComponent;
				var x:int = event.localX - Number(event.dragSource.dataForFormat("x"));
				var y:int = event.localY - Number(event.dragSource.dataForFormat("y"));
				gameObject.executeMove( type, source, target, x, y );
				
			}
			
		]]>
	</mx:Script>

	<mx:Style>
		@namespace mx "http://www.adobe.com/2006/mxml";
		.boxStyle {
			border-style: outset;
			background-color: gray;
		}
		.friendName {
			font-size: 12;
			font-weight:bold;
			text-align:center;
		}
	</mx:Style>
			
	<mx:Canvas id="canvas" styleName=".boxStyle" dragEnter="dragEnter(event)" dragDrop="dragDrop(event)" width="100%" height="100%"
			verticalScrollPolicy="off" horizontalScrollPolicy="off" backgroundColor="red" />
	
</mx:TitleWindow>